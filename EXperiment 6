1) Perfect Squares

class Solution {
public:
int numSquares(int n) {
vector<int> dp(n + 1, INT_MAX);
dp[0] = 0; 
for (int i = 1; i <= n; ++i) {
for (int j = 1; j * j <= i; ++j) {
dp[i] = min(dp[i], 1 + dp[i - j * j]);
}
}
return dp[n];
} 
};
-----------------------------------------------
2) Longest Increasing Subsequence

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
    int n = nums.size();
    if (n == 0) return 0;

    vector<int> dp(n, 1); 

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < i; j++) {
            if (nums[i] > nums[j]) {
                dp[i] = max(dp[i], dp[j] + 1);  
            }
        }
    }

    return *max_element(dp.begin(), dp.end()); 
}    
    
};
----------------------------------------------------
3)  House Robber

class Solution {
public:
    int rob(vector<int>& nums) {
    int n = nums.size();
    if (n == 0) return 0;
    if (n == 1) return nums[0];

    int prev2 = 0, prev1 = 0;  
    
    for (int num : nums) {
        int curr = max(prev1, prev2 + num);  
        prev2 = prev1;  
        prev1 = curr;
    }
    
    return prev1;
}   
};
